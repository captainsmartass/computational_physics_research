// This C-code calculates and plots the distributions of kinematic variables which were used to understand how to 
// filter data properly to analyze the asymmetry in the trajectory of a pair of scattered pions.

{ 
gROOT->Reset(); 

FILE *fp = fopen("Data.txt","r"); 
 FILE *fpp = fopen("Data1.txt","r");
 FILE *fp3 = fopen("DatathetaCM1.txt","r");
 FILE *fp4 = fopen("kinvarsnu.txt","r");
 FILE *fp5 = fopen("kinvarsxx.txt","r");
 FILE *fp6 = fopen("R_t_sorted.txt","r");
  FILE *fp7 = fopen("R_t_sorted_1.txt","r");
 FILE *fp8 = fopen("R_t_sorted_2.txt","r");
  FILE *fp9 = fopen("x_feynman_1.txt","r");
 FILE *fp10 = fopen("x_feynman_2.txt","r");
 
 Float_t x,y,z,n,w,a,b,c,d,e,i,g,h,m,rt1,rt2,rt3,rtt1,rtt2,rtt3,xf,xff; 
Int_t ncols; 
Int_t ncols2; 
Int_t ncols3;
Int_t ncols4;
Int_t ncols44;
Int_t ncols_quad;
Int_t ncols_4mom;
Int_t ncols_rt; 
Int_t ncols_rtt; 
Int_t ncols_xf; 
Int_t ncols_xff; 

char var1[132];
Int_t nlines = 0; 
Int_t nlines2 = 0; 
Int_t nlines3 = 0;
Int_t nlines4 = 0;
Int_t nlines44 = 0;
Int_t nlines_quad = 0;
Int_t nlines_4mom = 0;
Int_t nlines_rt = 0;
Int_t nlines_rtt = 0;
Int_t nlines_xf = 0;
Int_t nlines_xff = 0;
 

TFile *f = new TFile("basic.root","RECREATE"); 

TH1F *h1 = new TH1F("h1","phi_R Distribution",100,-180,180); 
TH1F *h2 = new TH1F("h2","Mass of 2 Pions Distribution",100,0,2); 
TH1F *h3 = new TH1F("h3","Theta Center of Mass",100,0,4); 
TH1F *h4 = new TH1F("h4","Nu",100,2,5); 
TH1F *h5 = new TH1F("h5","Q^2",1000,0,5); 
TH1F *h6 = new TH1F("h6","X",100,2,5);
TH1F *h7 = new TH1F("h7","W",100,0,5);
TH1F *h8 = new TH1F("h8","zz",100,0,1);
TH1F *h9 = new TH1F("h9","Missing_Mass",200,1.8,3.2);
TH1F *h10 = new TH1F("h10","R_T (3-Momentum Vector Magnitude)",1000,0,1.5);
TH1F *h11 = new TH1F("h11","x_feynman_1",1000,-1,1);
TH1F *h12 = new TH1F("h12","x_feynman_2",1000,-1,1);
TH1F *h13 = new TH1F("h13","R_T_1",1000,0,1.5);
TH1F *h14 = new TH1F("h14","R_T_2",1000,0,1.5);

TNtuple *ntuple = new TNtuple("ntuple","data from ascii file","x:y:z:n:w"); 
while (1) { 
  ncols = fscanf(fp,"%s %s %s %s %f %s",var1,var1,var1,var1, &x, var1); 
if (ncols < 0) break; 

h1->Fill(x); 

nlines++; 

  ncols2 = fscanf(fpp,"%s %f",var1,&y); 
  
if (ncols2 < 0) break; 

h2->Fill(y); 
 nlines2++;

 ncols3 = fscanf(fp3,"%s %s %f %s %s %s",var1,var1,&z,var1, var1, var1);

if (ncols3 < 0) break; 

h3->Fill(z); 
 nlines3++;

 ncols4 = fscanf(fp4,"%s %s %s %f %f",var1,var1,var1,&n,&w);
 
 if (ncols4 < 0) break; 

 h4->Fill(n);
 h5->Fill(w);
 nlines4++;
 
 
 ncols_quad = fscanf(fp5,"%s %s %s %s %s %f %f %f %f",var1,var1,var1,var1,var1,&a,&b,&c,&d);
 h6->Fill(a);
 h7->Fill(b);
 h8->Fill(c);
 h9->Fill(d);
 ncols_quad++;
 ncols_4mom = fscanf(fp6,"%s %f %f %f %f",var1,&e,&i,&g,&h);

 m = sqrt( i*i + g*g + h*h);
 if (nlines3 < 5) printf("R_T=%8s %g",var1,m);
 h10->Fill(m);
 ncols_4mom++;

  
ncols_xf = fscanf(fp9,"%s %f",var1,&xf);
if (nlines_xf < 5) printf("x_f=%8s %g",var1,xf)
 h11->Fill(xf)
   nlines_rt++;

 ncols_xff = fscanf(fp10,"%s %f",var1,&xff);
h12->Fill(xff)
  nlines_rtt;

ncols_rt = fscanf(fp7,"%s %s %f %f %f",var1,var1,&rt1,&rt2,&rt3);
m1 = sqrt( rt1*rt1 + rt2*rt2 + rt3*rt3);
h13->Fill(m1)
  nlines_xf++;

 ncols_rtt = fscanf(fp8,"%s %s %f %f %f",var1,var1,&rtt1,&rtt2,&rtt3);
m2 = sqrt( rtt1*rtt1 + rtt2*rtt2 + rtt3*rtt3);
h14->Fill(m2)
  nlines_xff++;








}
printf(" found %d points 
",nlines3); 
fclose(fp);
fclose(fpp);
fclose(fp3);
fclose(fp4);
 fclose(fp5);
fclose(fp6);
 fclose(fp7);
fclose(fp8);
fclose(fp9);
fclose(fp10);

f->Write();

TCanvas *c1 = new TCanvas("c1","c1",50,50,800,600);

 c1->Divide(4,4);
 c1->cd(1); 
 
 h1->Draw();
 c1->cd(2);
 h2->Draw();
 c1->cd(3);
 h3->Draw();
 c1->cd(4);
 h4->Draw();
 c1->cd(5);
 h5->Draw();
 c1->cd(6);
 h6->Draw();
 c1->cd(7);
 h7->Draw();
 c1->cd(8);
 h8->Draw();
 c1->cd(9);
h9->Draw();
 c1->cd(10);
 h10->Draw();
  c1->cd(11);
  h11->Draw();
 c1->cd(12);
 h12->Draw();
 c1->cd(13);
 h13->Draw();
c1->cd(14);
 h14->Draw();
 
 }
}
